#include <stdio.h>
#define GM_RL_BUFSIZE 1024
#define GM_TOK_BUFSIZE 64
#define GM_TOK_DELIM " \t\r\n\a"
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <sys/wait.h>


char **gm_split_line(char *line)
{
	int bufsize = GM_TOK_BUFSIZE, position = 0;
	char **tokens = malloc(bufsize * sizeof(char*));
	char *token;

	if (!tokens) {
		fprintf(stderr, "gm: allocation error\n");
		exit(EXIT_FAILURE);
	}

	token = strtok(line, GM_TOK_DELIM);
	while (token != NULL) {
		tokens[position] = token;
		position ++;

		if (position >= bufsize) {
			bufsize += GM_TOK_BUFSIZE;
			tokens = realloc(tokens, bufsize * sizeof(char*));
			if (!tokens) {
				fprintf(stderr, "gm: allocation error\n");
				exit(EXIT_FAILURE);
			}
		}
	token = strtok(NULL, GM_TOK_DELIM);
	}
	tokens[position] = NULL;
	return tokens;
}

	


char *gm_read_line(void)
{
	int bufsize = GM_RL_BUFSIZE;
	int position= 0;
	char *buffer = alloc(sizeof(char) * bufsize);
	int c;
	
	if (!buffer){
		fprintf(stderr, "gm: allocation error\n");
		exit(EXIT_FAILURE);
	}

	while (1) {
		// Read a character
		c = getchar();

		if (c == EOF || c == "\n") {
			buffer[position] = '\0';
			return buffer;
		}
		else {
			buffer[position] = c;
		}
		position++;

		if (position >= bufsize){
			bufsize += GM_RL_BUFSIZE;
			buffer = realloc(buffer,bufsize);
			if (!buffer) {
				fprintf(stderr, "gm: allocation error\n");
				exit(EXIT_FAILURE);
			}
		}
	}
}


void gm_loop(void)
{
	char *line;
	char **args;
	int status;
	
	do {
		printf("$ ");
		line = gm_read_line();
		args = gm_split_line();
		status = gm_execute(args);

		free(line);
		free(args);
	}
	while (status);
}




int main(int argc, char **argv)
{

	gm_loop();

	return EXIT_SUCCESS;

}


